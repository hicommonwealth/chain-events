"use strict";
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ISwapCollateral__factory = void 0;
const ethers_1 = require("ethers");
class ISwapCollateral__factory {
    static connect(address, signerOrProvider) {
        return new ethers_1.Contract(address, _abi, signerOrProvider);
    }
}
exports.ISwapCollateral__factory = ISwapCollateral__factory;
const _abi = [
    {
        inputs: [
            {
                internalType: "address[]",
                name: "assetToSwapFromList",
                type: "address[]",
            },
            {
                internalType: "address[]",
                name: "assetToSwapToList",
                type: "address[]",
            },
            {
                internalType: "uint256[]",
                name: "amountToSwapList",
                type: "uint256[]",
            },
            {
                internalType: "uint256[]",
                name: "minAmountsToReceive",
                type: "uint256[]",
            },
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "deadline",
                        type: "uint256",
                    },
                    {
                        internalType: "uint8",
                        name: "v",
                        type: "uint8",
                    },
                    {
                        internalType: "bytes32",
                        name: "r",
                        type: "bytes32",
                    },
                    {
                        internalType: "bytes32",
                        name: "s",
                        type: "bytes32",
                    },
                ],
                internalType: "struct ISwapCollateral.PermitSignature[]",
                name: "permitParams",
                type: "tuple[]",
            },
            {
                internalType: "bool[]",
                name: "useEthPath",
                type: "bool[]",
            },
        ],
        name: "swapAndDeposit",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
//# sourceMappingURL=ISwapCollateral__factory.js.map