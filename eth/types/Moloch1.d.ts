/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface Moloch1Interface extends Interface {
  functions: {
    abortWindow: TypedFunctionDescription<{ encode([]: []): string }>;

    approvedToken: TypedFunctionDescription<{ encode([]: []): string }>;

    dilutionBound: TypedFunctionDescription<{ encode([]: []): string }>;

    gracePeriodLength: TypedFunctionDescription<{ encode([]: []): string }>;

    guildBank: TypedFunctionDescription<{ encode([]: []): string }>;

    memberAddressByDelegateKey: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    members: TypedFunctionDescription<{ encode([]: [string]): string }>;

    periodDuration: TypedFunctionDescription<{ encode([]: []): string }>;

    processingReward: TypedFunctionDescription<{ encode([]: []): string }>;

    proposalDeposit: TypedFunctionDescription<{ encode([]: []): string }>;

    proposalQueue: TypedFunctionDescription<{
      encode([]: [BigNumberish]): string;
    }>;

    summoningTime: TypedFunctionDescription<{ encode([]: []): string }>;

    totalShares: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSharesRequested: TypedFunctionDescription<{ encode([]: []): string }>;

    votingPeriodLength: TypedFunctionDescription<{ encode([]: []): string }>;

    submitProposal: TypedFunctionDescription<{
      encode([applicant, tokenTribute, sharesRequested, details]: [
        string,
        BigNumberish,
        BigNumberish,
        string
      ]): string;
    }>;

    submitVote: TypedFunctionDescription<{
      encode([proposalIndex, uintVote]: [BigNumberish, BigNumberish]): string;
    }>;

    processProposal: TypedFunctionDescription<{
      encode([proposalIndex]: [BigNumberish]): string;
    }>;

    ragequit: TypedFunctionDescription<{
      encode([sharesToBurn]: [BigNumberish]): string;
    }>;

    abort: TypedFunctionDescription<{
      encode([proposalIndex]: [BigNumberish]): string;
    }>;

    updateDelegateKey: TypedFunctionDescription<{
      encode([newDelegateKey]: [string]): string;
    }>;

    getCurrentPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    getProposalQueueLength: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    canRagequit: TypedFunctionDescription<{
      encode([highestIndexYesVote]: [BigNumberish]): string;
    }>;

    hasVotingPeriodExpired: TypedFunctionDescription<{
      encode([startingPeriod]: [BigNumberish]): string;
    }>;

    getMemberProposalVote: TypedFunctionDescription<{
      encode([memberAddress, proposalIndex]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    Abort: TypedEventDescription<{
      encodeTopics([proposalIndex, applicantAddress]: [
        BigNumberish | null,
        null
      ]): string[];
    }>;

    ProcessProposal: TypedEventDescription<{
      encodeTopics([
        proposalIndex,
        applicant,
        memberAddress,
        tokenTribute,
        sharesRequested,
        didPass
      ]: [
        BigNumberish | null,
        string | null,
        string | null,
        null,
        null,
        null
      ]): string[];
    }>;

    Ragequit: TypedEventDescription<{
      encodeTopics([memberAddress, sharesToBurn]: [
        string | null,
        null
      ]): string[];
    }>;

    SubmitProposal: TypedEventDescription<{
      encodeTopics([
        proposalIndex,
        delegateKey,
        memberAddress,
        applicant,
        tokenTribute,
        sharesRequested
      ]: [
        null,
        string | null,
        string | null,
        string | null,
        null,
        null
      ]): string[];
    }>;

    SubmitVote: TypedEventDescription<{
      encodeTopics([proposalIndex, delegateKey, memberAddress, uintVote]: [
        BigNumberish | null,
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    SummonComplete: TypedEventDescription<{
      encodeTopics([summoner, shares]: [string | null, null]): string[];
    }>;

    UpdateDelegateKey: TypedEventDescription<{
      encodeTopics([memberAddress, newDelegateKey]: [
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Moloch1 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Moloch1;
  attach(addressOrName: string): Moloch1;
  deployed(): Promise<Moloch1>;

  on(event: EventFilter | string, listener: Listener): Moloch1;
  once(event: EventFilter | string, listener: Listener): Moloch1;
  addListener(eventName: EventFilter | string, listener: Listener): Moloch1;
  removeAllListeners(eventName: EventFilter | string): Moloch1;
  removeListener(eventName: any, listener: Listener): Moloch1;

  interface: Moloch1Interface;

  functions: {
    abortWindow(overrides?: TransactionOverrides): Promise<BigNumber>;

    "abortWindow()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    approvedToken(overrides?: TransactionOverrides): Promise<string>;

    "approvedToken()"(overrides?: TransactionOverrides): Promise<string>;

    dilutionBound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    guildBank(overrides?: TransactionOverrides): Promise<string>;

    "guildBank()"(overrides?: TransactionOverrides): Promise<string>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    members(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      0: string;
      1: BigNumber;
      2: boolean;
      3: BigNumber;
    }>;

    "members(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<{
      delegateKey: string;
      shares: BigNumber;
      exists: boolean;
      highestIndexYesVote: BigNumber;
      0: string;
      1: BigNumber;
      2: boolean;
      3: BigNumber;
    }>;

    periodDuration(overrides?: TransactionOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    processingReward(overrides?: TransactionOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: TransactionOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      proposer: string;
      applicant: string;
      sharesRequested: BigNumber;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: BigNumber;
      details: string;
      maxTotalSharesAtYesVote: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: string;
      11: BigNumber;
    }>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      proposer: string;
      applicant: string;
      sharesRequested: BigNumber;
      startingPeriod: BigNumber;
      yesVotes: BigNumber;
      noVotes: BigNumber;
      processed: boolean;
      didPass: boolean;
      aborted: boolean;
      tokenTribute: BigNumber;
      details: string;
      maxTotalSharesAtYesVote: BigNumber;
      0: string;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: boolean;
      7: boolean;
      8: boolean;
      9: BigNumber;
      10: string;
      11: BigNumber;
    }>;

    summoningTime(overrides?: TransactionOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalShares(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSharesRequested(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSharesRequested()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    votingPeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * *************** PROPOSAL FUNCTIONS****************
     */
    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * *************** PROPOSAL FUNCTIONS****************
     */
    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getCurrentPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getProposalQueueLength(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getProposalQueueLength()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;
  };

  abortWindow(overrides?: TransactionOverrides): Promise<BigNumber>;

  "abortWindow()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  approvedToken(overrides?: TransactionOverrides): Promise<string>;

  "approvedToken()"(overrides?: TransactionOverrides): Promise<string>;

  dilutionBound(overrides?: TransactionOverrides): Promise<BigNumber>;

  "dilutionBound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  gracePeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

  "gracePeriodLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  guildBank(overrides?: TransactionOverrides): Promise<string>;

  "guildBank()"(overrides?: TransactionOverrides): Promise<string>;

  memberAddressByDelegateKey(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "memberAddressByDelegateKey(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  members(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<{
    delegateKey: string;
    shares: BigNumber;
    exists: boolean;
    highestIndexYesVote: BigNumber;
    0: string;
    1: BigNumber;
    2: boolean;
    3: BigNumber;
  }>;

  "members(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<{
    delegateKey: string;
    shares: BigNumber;
    exists: boolean;
    highestIndexYesVote: BigNumber;
    0: string;
    1: BigNumber;
    2: boolean;
    3: BigNumber;
  }>;

  periodDuration(overrides?: TransactionOverrides): Promise<BigNumber>;

  "periodDuration()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  processingReward(overrides?: TransactionOverrides): Promise<BigNumber>;

  "processingReward()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  proposalDeposit(overrides?: TransactionOverrides): Promise<BigNumber>;

  "proposalDeposit()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  proposalQueue(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    proposer: string;
    applicant: string;
    sharesRequested: BigNumber;
    startingPeriod: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    processed: boolean;
    didPass: boolean;
    aborted: boolean;
    tokenTribute: BigNumber;
    details: string;
    maxTotalSharesAtYesVote: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
    7: boolean;
    8: boolean;
    9: BigNumber;
    10: string;
    11: BigNumber;
  }>;

  "proposalQueue(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    proposer: string;
    applicant: string;
    sharesRequested: BigNumber;
    startingPeriod: BigNumber;
    yesVotes: BigNumber;
    noVotes: BigNumber;
    processed: boolean;
    didPass: boolean;
    aborted: boolean;
    tokenTribute: BigNumber;
    details: string;
    maxTotalSharesAtYesVote: BigNumber;
    0: string;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: boolean;
    7: boolean;
    8: boolean;
    9: BigNumber;
    10: string;
    11: BigNumber;
  }>;

  summoningTime(overrides?: TransactionOverrides): Promise<BigNumber>;

  "summoningTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  totalShares(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalShares()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  totalSharesRequested(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSharesRequested()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  votingPeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

  "votingPeriodLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * *************** PROPOSAL FUNCTIONS****************
   */
  submitProposal(
    applicant: string,
    tokenTribute: BigNumberish,
    sharesRequested: BigNumberish,
    details: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * *************** PROPOSAL FUNCTIONS****************
   */
  "submitProposal(address,uint256,uint256,string)"(
    applicant: string,
    tokenTribute: BigNumberish,
    sharesRequested: BigNumberish,
    details: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitVote(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitVote(uint256,uint8)"(
    proposalIndex: BigNumberish,
    uintVote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  processProposal(
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "processProposal(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  ragequit(
    sharesToBurn: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "ragequit(uint256)"(
    sharesToBurn: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  abort(
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "abort(uint256)"(
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  updateDelegateKey(
    newDelegateKey: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "updateDelegateKey(address)"(
    newDelegateKey: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getCurrentPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getCurrentPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  getProposalQueueLength(overrides?: TransactionOverrides): Promise<BigNumber>;

  "getProposalQueueLength()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  canRagequit(
    highestIndexYesVote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "canRagequit(uint256)"(
    highestIndexYesVote: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  hasVotingPeriodExpired(
    startingPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "hasVotingPeriodExpired(uint256)"(
    startingPeriod: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  getMemberProposalVote(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  "getMemberProposalVote(address,uint256)"(
    memberAddress: string,
    proposalIndex: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  filters: {
    Abort(
      proposalIndex: BigNumberish | null,
      applicantAddress: null
    ): EventFilter;

    ProcessProposal(
      proposalIndex: BigNumberish | null,
      applicant: string | null,
      memberAddress: string | null,
      tokenTribute: null,
      sharesRequested: null,
      didPass: null
    ): EventFilter;

    Ragequit(memberAddress: string | null, sharesToBurn: null): EventFilter;

    SubmitProposal(
      proposalIndex: null,
      delegateKey: string | null,
      memberAddress: string | null,
      applicant: string | null,
      tokenTribute: null,
      sharesRequested: null
    ): EventFilter;

    SubmitVote(
      proposalIndex: BigNumberish | null,
      delegateKey: string | null,
      memberAddress: string | null,
      uintVote: null
    ): EventFilter;

    SummonComplete(summoner: string | null, shares: null): EventFilter;

    UpdateDelegateKey(
      memberAddress: string | null,
      newDelegateKey: null
    ): EventFilter;
  };

  estimate: {
    abortWindow(overrides?: TransactionOverrides): Promise<BigNumber>;

    "abortWindow()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    approvedToken(overrides?: TransactionOverrides): Promise<BigNumber>;

    "approvedToken()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    dilutionBound(overrides?: TransactionOverrides): Promise<BigNumber>;

    "dilutionBound()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    gracePeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "gracePeriodLength()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    guildBank(overrides?: TransactionOverrides): Promise<BigNumber>;

    "guildBank()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    memberAddressByDelegateKey(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "memberAddressByDelegateKey(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    members(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "members(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    periodDuration(overrides?: TransactionOverrides): Promise<BigNumber>;

    "periodDuration()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    processingReward(overrides?: TransactionOverrides): Promise<BigNumber>;

    "processingReward()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposalDeposit(overrides?: TransactionOverrides): Promise<BigNumber>;

    "proposalDeposit()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposalQueue(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposalQueue(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    summoningTime(overrides?: TransactionOverrides): Promise<BigNumber>;

    "summoningTime()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalShares(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalShares()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSharesRequested(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSharesRequested()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    votingPeriodLength(overrides?: TransactionOverrides): Promise<BigNumber>;

    "votingPeriodLength()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * *************** PROPOSAL FUNCTIONS****************
     */
    submitProposal(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * *************** PROPOSAL FUNCTIONS****************
     */
    "submitProposal(address,uint256,uint256,string)"(
      applicant: string,
      tokenTribute: BigNumberish,
      sharesRequested: BigNumberish,
      details: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitVote(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitVote(uint256,uint8)"(
      proposalIndex: BigNumberish,
      uintVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    processProposal(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "processProposal(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    ragequit(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "ragequit(uint256)"(
      sharesToBurn: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    abort(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "abort(uint256)"(
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    updateDelegateKey(
      newDelegateKey: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "updateDelegateKey(address)"(
      newDelegateKey: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getCurrentPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    "getCurrentPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    getProposalQueueLength(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getProposalQueueLength()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    canRagequit(
      highestIndexYesVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "canRagequit(uint256)"(
      highestIndexYesVote: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hasVotingPeriodExpired(
      startingPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hasVotingPeriodExpired(uint256)"(
      startingPeriod: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getMemberProposalVote(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getMemberProposalVote(address,uint256)"(
      memberAddress: string,
      proposalIndex: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
