/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface GovernorAlphaInterface extends Interface {
  functions: {
    BALLOT_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    DOMAIN_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    comp: TypedFunctionDescription<{ encode([]: []): string }>;

    guardian: TypedFunctionDescription<{ encode([]: []): string }>;

    latestProposalIds: TypedFunctionDescription<{
      encode([]: [string]): string;
    }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    proposalCount: TypedFunctionDescription<{ encode([]: []): string }>;

    proposals: TypedFunctionDescription<{ encode([]: [BigNumberish]): string }>;

    timelock: TypedFunctionDescription<{ encode([]: []): string }>;

    quorumVotes: TypedFunctionDescription<{ encode([]: []): string }>;

    proposalThreshold: TypedFunctionDescription<{ encode([]: []): string }>;

    proposalMaxOperations: TypedFunctionDescription<{ encode([]: []): string }>;

    votingDelay: TypedFunctionDescription<{ encode([]: []): string }>;

    votingPeriod: TypedFunctionDescription<{ encode([]: []): string }>;

    propose: TypedFunctionDescription<{
      encode([targets, values, signatures, calldatas, description]: [
        string[],
        BigNumberish[],
        string[],
        Arrayish[],
        string
      ]): string;
    }>;

    queue: TypedFunctionDescription<{
      encode([proposalId]: [BigNumberish]): string;
    }>;

    execute: TypedFunctionDescription<{
      encode([proposalId]: [BigNumberish]): string;
    }>;

    cancel: TypedFunctionDescription<{
      encode([proposalId]: [BigNumberish]): string;
    }>;

    getActions: TypedFunctionDescription<{
      encode([proposalId]: [BigNumberish]): string;
    }>;

    getReceipt: TypedFunctionDescription<{
      encode([proposalId, voter]: [BigNumberish, string]): string;
    }>;

    state: TypedFunctionDescription<{
      encode([proposalId]: [BigNumberish]): string;
    }>;

    castVote: TypedFunctionDescription<{
      encode([proposalId, support]: [BigNumberish, boolean]): string;
    }>;

    castVoteBySig: TypedFunctionDescription<{
      encode([proposalId, support, v, r, s]: [
        BigNumberish,
        boolean,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    __acceptAdmin: TypedFunctionDescription<{ encode([]: []): string }>;

    __abdicate: TypedFunctionDescription<{ encode([]: []): string }>;

    __queueSetTimelockPendingAdmin: TypedFunctionDescription<{
      encode([newPendingAdmin, eta]: [string, BigNumberish]): string;
    }>;

    __executeSetTimelockPendingAdmin: TypedFunctionDescription<{
      encode([newPendingAdmin, eta]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    ProposalCanceled: TypedEventDescription<{
      encodeTopics([id]: [null]): string[];
    }>;

    ProposalCreated: TypedEventDescription<{
      encodeTopics([
        id,
        proposer,
        targets,
        values,
        signatures,
        calldatas,
        startBlock,
        endBlock,
        description
      ]: [null, null, null, null, null, null, null, null, null]): string[];
    }>;

    ProposalExecuted: TypedEventDescription<{
      encodeTopics([id]: [null]): string[];
    }>;

    ProposalQueued: TypedEventDescription<{
      encodeTopics([id, eta]: [null, null]): string[];
    }>;

    VoteCast: TypedEventDescription<{
      encodeTopics([voter, proposalId, support, votes]: [
        null,
        null,
        null,
        null
      ]): string[];
    }>;
  };
}

export class GovernorAlpha extends Contract {
  connect(signerOrProvider: Signer | Provider | string): GovernorAlpha;
  attach(addressOrName: string): GovernorAlpha;
  deployed(): Promise<GovernorAlpha>;

  on(event: EventFilter | string, listener: Listener): GovernorAlpha;
  once(event: EventFilter | string, listener: Listener): GovernorAlpha;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): GovernorAlpha;
  removeAllListeners(eventName: EventFilter | string): GovernorAlpha;
  removeListener(eventName: any, listener: Listener): GovernorAlpha;

  interface: GovernorAlphaInterface;

  functions: {
    BALLOT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "BALLOT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    comp(overrides?: TransactionOverrides): Promise<string>;

    "comp()"(overrides?: TransactionOverrides): Promise<string>;

    guardian(overrides?: TransactionOverrides): Promise<string>;

    "guardian()"(overrides?: TransactionOverrides): Promise<string>;

    latestProposalIds(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    proposalCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      eta: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: boolean;
      8: boolean;
    }>;

    timelock(overrides?: TransactionOverrides): Promise<string>;

    "timelock()"(overrides?: TransactionOverrides): Promise<string>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: Arrayish[],
      description: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: Arrayish[],
      description: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: TransactionOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: TransactionOverrides
    ): Promise<{
      hasVoted: boolean;
      support: boolean;
      votes: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
    }>;

    state(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<number>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    __acceptAdmin(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "__acceptAdmin()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    __abdicate(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    "__abdicate()"(
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  BALLOT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "BALLOT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  comp(overrides?: TransactionOverrides): Promise<string>;

  "comp()"(overrides?: TransactionOverrides): Promise<string>;

  guardian(overrides?: TransactionOverrides): Promise<string>;

  "guardian()"(overrides?: TransactionOverrides): Promise<string>;

  latestProposalIds(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  proposalCount(overrides?: TransactionOverrides): Promise<BigNumber>;

  "proposalCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    eta: BigNumber;
    startBlock: BigNumber;
    endBlock: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: boolean;
    8: boolean;
  }>;

  timelock(overrides?: TransactionOverrides): Promise<string>;

  "timelock()"(overrides?: TransactionOverrides): Promise<string>;

  /**
   * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
   */
  quorumVotes(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
   */
  "quorumVotes()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The number of votes required in order for a voter to become a proposer
   */
  proposalThreshold(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The number of votes required in order for a voter to become a proposer
   */
  "proposalThreshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The maximum number of actions that can be included in a proposal
   */
  proposalMaxOperations(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The maximum number of actions that can be included in a proposal
   */
  "proposalMaxOperations()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * The delay before voting on a proposal may take place, once proposed
   */
  votingDelay(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The delay before voting on a proposal may take place, once proposed
   */
  "votingDelay()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The duration of voting on a proposal, in blocks
   */
  votingPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * The duration of voting on a proposal, in blocks
   */
  "votingPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: Arrayish[],
    description: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],string[],bytes[],string)"(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: Arrayish[],
    description: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: TransactionOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: TransactionOverrides
  ): Promise<{
    hasVoted: boolean;
    support: boolean;
    votes: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
  }>;

  state(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<number>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  castVoteBySig(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
    proposalId: BigNumberish,
    support: boolean,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  __acceptAdmin(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "__acceptAdmin()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  __abdicate(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  "__abdicate()"(
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  __queueSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "__queueSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  __executeSetTimelockPendingAdmin(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "__executeSetTimelockPendingAdmin(address,uint256)"(
    newPendingAdmin: string,
    eta: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    ProposalCanceled(id: null): EventFilter;

    ProposalCreated(
      id: null,
      proposer: null,
      targets: null,
      values: null,
      signatures: null,
      calldatas: null,
      startBlock: null,
      endBlock: null,
      description: null
    ): EventFilter;

    ProposalExecuted(id: null): EventFilter;

    ProposalQueued(id: null, eta: null): EventFilter;

    VoteCast(
      voter: null,
      proposalId: null,
      support: null,
      votes: null
    ): EventFilter;
  };

  estimate: {
    BALLOT_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "BALLOT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    comp(overrides?: TransactionOverrides): Promise<BigNumber>;

    "comp()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    guardian(overrides?: TransactionOverrides): Promise<BigNumber>;

    "guardian()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposalCount(overrides?: TransactionOverrides): Promise<BigNumber>;

    "proposalCount()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    timelock(overrides?: TransactionOverrides): Promise<BigNumber>;

    "timelock()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    quorumVotes(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed
     */
    "quorumVotes()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    proposalThreshold(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The number of votes required in order for a voter to become a proposer
     */
    "proposalThreshold()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    proposalMaxOperations(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The maximum number of actions that can be included in a proposal
     */
    "proposalMaxOperations()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    votingDelay(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The delay before voting on a proposal may take place, once proposed
     */
    "votingDelay()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    votingPeriod(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * The duration of voting on a proposal, in blocks
     */
    "votingPeriod()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: Arrayish[],
      description: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: Arrayish[],
      description: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    queue(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancel(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    castVoteBySig(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "castVoteBySig(uint256,bool,uint8,bytes32,bytes32)"(
      proposalId: BigNumberish,
      support: boolean,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    __acceptAdmin(overrides?: TransactionOverrides): Promise<BigNumber>;

    "__acceptAdmin()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    __abdicate(overrides?: TransactionOverrides): Promise<BigNumber>;

    "__abdicate()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    __queueSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "__queueSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    __executeSetTimelockPendingAdmin(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "__executeSetTimelockPendingAdmin(address,uint256)"(
      newPendingAdmin: string,
      eta: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
