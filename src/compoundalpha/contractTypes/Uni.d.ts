/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface UniInterface extends Interface {
  functions: {
    DELEGATION_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    DOMAIN_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    PERMIT_TYPEHASH: TypedFunctionDescription<{ encode([]: []): string }>;

    checkpoints: TypedFunctionDescription<{
      encode([,]: [string, BigNumberish]): string;
    }>;

    decimals: TypedFunctionDescription<{ encode([]: []): string }>;

    delegates: TypedFunctionDescription<{ encode([]: [string]): string }>;

    minimumTimeBetweenMints: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    mintCap: TypedFunctionDescription<{ encode([]: []): string }>;

    minter: TypedFunctionDescription<{ encode([]: []): string }>;

    mintingAllowedAfter: TypedFunctionDescription<{ encode([]: []): string }>;

    name: TypedFunctionDescription<{ encode([]: []): string }>;

    nonces: TypedFunctionDescription<{ encode([]: [string]): string }>;

    numCheckpoints: TypedFunctionDescription<{ encode([]: [string]): string }>;

    symbol: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    setMinter: TypedFunctionDescription<{
      encode([minter_]: [string]): string;
    }>;

    mint: TypedFunctionDescription<{
      encode([dst, rawAmount]: [string, BigNumberish]): string;
    }>;

    allowance: TypedFunctionDescription<{
      encode([account, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, rawAmount]: [string, BigNumberish]): string;
    }>;

    permit: TypedFunctionDescription<{
      encode([owner, spender, rawAmount, deadline, v, r, s]: [
        string,
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([dst, rawAmount]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([src, dst, rawAmount]: [string, string, BigNumberish]): string;
    }>;

    delegate: TypedFunctionDescription<{
      encode([delegatee]: [string]): string;
    }>;

    delegateBySig: TypedFunctionDescription<{
      encode([delegatee, nonce, expiry, v, r, s]: [
        string,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        Arrayish,
        Arrayish
      ]): string;
    }>;

    getCurrentVotes: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    getPriorVotes: TypedFunctionDescription<{
      encode([account, blockNumber]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    DelegateChanged: TypedEventDescription<{
      encodeTopics([delegator, fromDelegate, toDelegate]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;

    DelegateVotesChanged: TypedEventDescription<{
      encodeTopics([delegate, previousBalance, newBalance]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    MinterChanged: TypedEventDescription<{
      encodeTopics([minter, newMinter]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, amount]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class Uni extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Uni;
  attach(addressOrName: string): Uni;
  deployed(): Promise<Uni>;

  on(event: EventFilter | string, listener: Listener): Uni;
  once(event: EventFilter | string, listener: Listener): Uni;
  addListener(eventName: EventFilter | string, listener: Listener): Uni;
  removeAllListeners(eventName: EventFilter | string): Uni;
  removeListener(eventName: any, listener: Listener): Uni;

  interface: UniInterface;

  functions: {
    DELEGATION_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "DELEGATION_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      fromBlock: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    "checkpoints(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<{
      fromBlock: number;
      votes: BigNumber;
      0: number;
      1: BigNumber;
    }>;

    decimals(overrides?: TransactionOverrides): Promise<number>;

    "decimals()"(overrides?: TransactionOverrides): Promise<number>;

    delegates(arg0: string, overrides?: TransactionOverrides): Promise<string>;

    "delegates(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    minimumTimeBetweenMints(overrides?: TransactionOverrides): Promise<number>;

    "minimumTimeBetweenMints()"(
      overrides?: TransactionOverrides
    ): Promise<number>;

    mintCap(overrides?: TransactionOverrides): Promise<number>;

    "mintCap()"(overrides?: TransactionOverrides): Promise<number>;

    minter(overrides?: TransactionOverrides): Promise<string>;

    "minter()"(overrides?: TransactionOverrides): Promise<string>;

    mintingAllowedAfter(overrides?: TransactionOverrides): Promise<BigNumber>;

    "mintingAllowedAfter()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<string>;

    "name()"(overrides?: TransactionOverrides): Promise<string>;

    nonces(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    numCheckpoints(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<number>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<number>;

    symbol(overrides?: TransactionOverrides): Promise<string>;

    "symbol()"(overrides?: TransactionOverrides): Promise<string>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Change the minter address
     * @param minter_ The address of the new minter
     */
    setMinter(
      minter_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Change the minter address
     * @param minter_ The address of the new minter
     */
    "setMinter(address)"(
      minter_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint new tokens
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to be minted
     */
    mint(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Mint new tokens
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to be minted
     */
    "mint(address,uint256)"(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the number of tokens `spender` is approved to spend on behalf of `account`
     * @param account The address of the account holding the funds
     * @param spender The address of the account spending the funds
     * @returns The number of tokens approved
     */
    allowance(
      account: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens `spender` is approved to spend on behalf of `account`
     * @param account The address of the account holding the funds
     * @param spender The address of the account spending the funds
     * @returns The number of tokens approved
     */
    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * Approve `spender` to transfer up to `amount` from `src`
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param spender The address of the account which may transfer tokens
     * @returns Whether or not the approval succeeded
     */
    approve(
      spender: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * Approve `spender` to transfer up to `amount` from `src`
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param spender The address of the account which may transfer tokens
     * @returns Whether or not the approval succeeded
     */
    "approve(address,uint256)"(
      spender: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Triggers an approval from owner to spends
     * @param deadline The time at which to expire the signature
     * @param owner The address to approve from
     * @param r Half of the ECDSA signature pair
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param s Half of the ECDSA signature pair
     * @param spender The address to be approved
     * @param v The recovery byte of the signature
     */
    permit(
      owner: string,
      spender: string,
      rawAmount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Triggers an approval from owner to spends
     * @param deadline The time at which to expire the signature
     * @param owner The address to approve from
     * @param r Half of the ECDSA signature pair
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param s Half of the ECDSA signature pair
     * @param spender The address to be approved
     * @param v The recovery byte of the signature
     */
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      rawAmount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Get the number of tokens held by the `account`
     * @param account The address of the account to get the balance of
     * @returns The number of tokens held
     */
    balanceOf(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens held by the `account`
     * @param account The address of the account to get the balance of
     * @returns The number of tokens held
     */
    "balanceOf(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @returns Whether or not the transfer succeeded
     */
    transfer(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @returns Whether or not the transfer succeeded
     */
    "transfer(address,uint256)"(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer `amount` tokens from `src` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @param src The address of the source account
     * @returns Whether or not the transfer succeeded
     */
    transferFrom(
      src: string,
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Transfer `amount` tokens from `src` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @param src The address of the source account
     * @returns Whether or not the transfer succeeded
     */
    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Delegate votes from `msg.sender` to `delegatee`
     * @param delegatee The address to delegate votes to
     */
    delegate(
      delegatee: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Delegate votes from `msg.sender` to `delegatee`
     * @param delegatee The address to delegate votes to
     */
    "delegate(address)"(
      delegatee: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Delegates votes from signatory to `delegatee`
     * @param delegatee The address to delegate votes to
     * @param expiry The time at which to expire the signature
     * @param nonce The contract state required to match the signature
     * @param r Half of the ECDSA signature pair
     * @param s Half of the ECDSA signature pair
     * @param v The recovery byte of the signature
     */
    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Delegates votes from signatory to `delegatee`
     * @param delegatee The address to delegate votes to
     * @param expiry The time at which to expire the signature
     * @param nonce The contract state required to match the signature
     * @param r Half of the ECDSA signature pair
     * @param s Half of the ECDSA signature pair
     * @param v The recovery byte of the signature
     */
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    /**
     * Gets the current votes balance for `account`
     * @param account The address to get votes balance
     * @returns The number of current votes for `account`
     */
    getCurrentVotes(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the current votes balance for `account`
     * @param account The address to get votes balance
     * @returns The number of current votes for `account`
     */
    "getCurrentVotes(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Block number must be a finalized block or else this function will revert to prevent misinformation.
     * Determine the prior number of votes for an account as of a block number
     * @param account The address of the account to check
     * @param blockNumber The block number to get the vote balance at
     * @returns The number of votes the account had as of the given block
     */
    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Block number must be a finalized block or else this function will revert to prevent misinformation.
     * Determine the prior number of votes for an account as of a block number
     * @param account The address of the account to check
     * @param blockNumber The block number to get the vote balance at
     * @returns The number of votes the account had as of the given block
     */
    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };

  DELEGATION_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "DELEGATION_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<string>;

  checkpoints(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    fromBlock: number;
    votes: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  "checkpoints(address,uint32)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<{
    fromBlock: number;
    votes: BigNumber;
    0: number;
    1: BigNumber;
  }>;

  decimals(overrides?: TransactionOverrides): Promise<number>;

  "decimals()"(overrides?: TransactionOverrides): Promise<number>;

  delegates(arg0: string, overrides?: TransactionOverrides): Promise<string>;

  "delegates(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  minimumTimeBetweenMints(overrides?: TransactionOverrides): Promise<number>;

  "minimumTimeBetweenMints()"(
    overrides?: TransactionOverrides
  ): Promise<number>;

  mintCap(overrides?: TransactionOverrides): Promise<number>;

  "mintCap()"(overrides?: TransactionOverrides): Promise<number>;

  minter(overrides?: TransactionOverrides): Promise<string>;

  "minter()"(overrides?: TransactionOverrides): Promise<string>;

  mintingAllowedAfter(overrides?: TransactionOverrides): Promise<BigNumber>;

  "mintingAllowedAfter()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  name(overrides?: TransactionOverrides): Promise<string>;

  "name()"(overrides?: TransactionOverrides): Promise<string>;

  nonces(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  numCheckpoints(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<number>;

  "numCheckpoints(address)"(
    arg0: string,
    overrides?: TransactionOverrides
  ): Promise<number>;

  symbol(overrides?: TransactionOverrides): Promise<string>;

  "symbol()"(overrides?: TransactionOverrides): Promise<string>;

  totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  /**
   * Change the minter address
   * @param minter_ The address of the new minter
   */
  setMinter(
    minter_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Change the minter address
   * @param minter_ The address of the new minter
   */
  "setMinter(address)"(
    minter_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint new tokens
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to be minted
   */
  mint(
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Mint new tokens
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to be minted
   */
  "mint(address,uint256)"(
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the number of tokens `spender` is approved to spend on behalf of `account`
   * @param account The address of the account holding the funds
   * @param spender The address of the account spending the funds
   * @returns The number of tokens approved
   */
  allowance(
    account: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the number of tokens `spender` is approved to spend on behalf of `account`
   * @param account The address of the account holding the funds
   * @param spender The address of the account spending the funds
   * @returns The number of tokens approved
   */
  "allowance(address,address)"(
    account: string,
    spender: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
   * Approve `spender` to transfer up to `amount` from `src`
   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
   * @param spender The address of the account which may transfer tokens
   * @returns Whether or not the approval succeeded
   */
  approve(
    spender: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
   * Approve `spender` to transfer up to `amount` from `src`
   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
   * @param spender The address of the account which may transfer tokens
   * @returns Whether or not the approval succeeded
   */
  "approve(address,uint256)"(
    spender: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Triggers an approval from owner to spends
   * @param deadline The time at which to expire the signature
   * @param owner The address to approve from
   * @param r Half of the ECDSA signature pair
   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
   * @param s Half of the ECDSA signature pair
   * @param spender The address to be approved
   * @param v The recovery byte of the signature
   */
  permit(
    owner: string,
    spender: string,
    rawAmount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Triggers an approval from owner to spends
   * @param deadline The time at which to expire the signature
   * @param owner The address to approve from
   * @param r Half of the ECDSA signature pair
   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
   * @param s Half of the ECDSA signature pair
   * @param spender The address to be approved
   * @param v The recovery byte of the signature
   */
  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    rawAmount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Get the number of tokens held by the `account`
   * @param account The address of the account to get the balance of
   * @returns The number of tokens held
   */
  balanceOf(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Get the number of tokens held by the `account`
   * @param account The address of the account to get the balance of
   * @returns The number of tokens held
   */
  "balanceOf(address)"(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Transfer `amount` tokens from `msg.sender` to `dst`
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to transfer
   * @returns Whether or not the transfer succeeded
   */
  transfer(
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer `amount` tokens from `msg.sender` to `dst`
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to transfer
   * @returns Whether or not the transfer succeeded
   */
  "transfer(address,uint256)"(
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer `amount` tokens from `src` to `dst`
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to transfer
   * @param src The address of the source account
   * @returns Whether or not the transfer succeeded
   */
  transferFrom(
    src: string,
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Transfer `amount` tokens from `src` to `dst`
   * @param dst The address of the destination account
   * @param rawAmount The number of tokens to transfer
   * @param src The address of the source account
   * @returns Whether or not the transfer succeeded
   */
  "transferFrom(address,address,uint256)"(
    src: string,
    dst: string,
    rawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Delegate votes from `msg.sender` to `delegatee`
   * @param delegatee The address to delegate votes to
   */
  delegate(
    delegatee: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Delegate votes from `msg.sender` to `delegatee`
   * @param delegatee The address to delegate votes to
   */
  "delegate(address)"(
    delegatee: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Delegates votes from signatory to `delegatee`
   * @param delegatee The address to delegate votes to
   * @param expiry The time at which to expire the signature
   * @param nonce The contract state required to match the signature
   * @param r Half of the ECDSA signature pair
   * @param s Half of the ECDSA signature pair
   * @param v The recovery byte of the signature
   */
  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Delegates votes from signatory to `delegatee`
   * @param delegatee The address to delegate votes to
   * @param expiry The time at which to expire the signature
   * @param nonce The contract state required to match the signature
   * @param r Half of the ECDSA signature pair
   * @param s Half of the ECDSA signature pair
   * @param v The recovery byte of the signature
   */
  "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: Arrayish,
    s: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  /**
   * Gets the current votes balance for `account`
   * @param account The address to get votes balance
   * @returns The number of current votes for `account`
   */
  getCurrentVotes(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the current votes balance for `account`
   * @param account The address to get votes balance
   * @returns The number of current votes for `account`
   */
  "getCurrentVotes(address)"(
    account: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Block number must be a finalized block or else this function will revert to prevent misinformation.
   * Determine the prior number of votes for an account as of a block number
   * @param account The address of the account to check
   * @param blockNumber The block number to get the vote balance at
   * @returns The number of votes the account had as of the given block
   */
  getPriorVotes(
    account: string,
    blockNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  /**
   * Block number must be a finalized block or else this function will revert to prevent misinformation.
   * Determine the prior number of votes for an account as of a block number
   * @param account The address of the account to check
   * @param blockNumber The block number to get the vote balance at
   * @returns The number of votes the account had as of the given block
   */
  "getPriorVotes(address,uint256)"(
    account: string,
    blockNumber: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      amount: null
    ): EventFilter;

    DelegateChanged(
      delegator: string | null,
      fromDelegate: string | null,
      toDelegate: string | null
    ): EventFilter;

    DelegateVotesChanged(
      delegate: string | null,
      previousBalance: null,
      newBalance: null
    ): EventFilter;

    MinterChanged(minter: null, newMinter: null): EventFilter;

    Transfer(from: string | null, to: string | null, amount: null): EventFilter;
  };

  estimate: {
    DELEGATION_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DELEGATION_TYPEHASH()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    DOMAIN_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "DOMAIN_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: TransactionOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    checkpoints(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "checkpoints(address,uint32)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: TransactionOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    delegates(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "delegates(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    minimumTimeBetweenMints(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "minimumTimeBetweenMints()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    mintCap(overrides?: TransactionOverrides): Promise<BigNumber>;

    "mintCap()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    minter(overrides?: TransactionOverrides): Promise<BigNumber>;

    "minter()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    mintingAllowedAfter(overrides?: TransactionOverrides): Promise<BigNumber>;

    "mintingAllowedAfter()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    name(overrides?: TransactionOverrides): Promise<BigNumber>;

    "name()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: TransactionOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    numCheckpoints(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "numCheckpoints(address)"(
      arg0: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: TransactionOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    totalSupply(overrides?: TransactionOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    /**
     * Change the minter address
     * @param minter_ The address of the new minter
     */
    setMinter(
      minter_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Change the minter address
     * @param minter_ The address of the new minter
     */
    "setMinter(address)"(
      minter_: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint new tokens
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to be minted
     */
    mint(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Mint new tokens
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to be minted
     */
    "mint(address,uint256)"(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens `spender` is approved to spend on behalf of `account`
     * @param account The address of the account holding the funds
     * @param spender The address of the account spending the funds
     * @returns The number of tokens approved
     */
    allowance(
      account: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens `spender` is approved to spend on behalf of `account`
     * @param account The address of the account holding the funds
     * @param spender The address of the account spending the funds
     * @returns The number of tokens approved
     */
    "allowance(address,address)"(
      account: string,
      spender: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * Approve `spender` to transfer up to `amount` from `src`
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param spender The address of the account which may transfer tokens
     * @returns Whether or not the approval succeeded
     */
    approve(
      spender: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * This will overwrite the approval amount for `spender` and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)
     * Approve `spender` to transfer up to `amount` from `src`
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param spender The address of the account which may transfer tokens
     * @returns Whether or not the approval succeeded
     */
    "approve(address,uint256)"(
      spender: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Triggers an approval from owner to spends
     * @param deadline The time at which to expire the signature
     * @param owner The address to approve from
     * @param r Half of the ECDSA signature pair
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param s Half of the ECDSA signature pair
     * @param spender The address to be approved
     * @param v The recovery byte of the signature
     */
    permit(
      owner: string,
      spender: string,
      rawAmount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Triggers an approval from owner to spends
     * @param deadline The time at which to expire the signature
     * @param owner The address to approve from
     * @param r Half of the ECDSA signature pair
     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)
     * @param s Half of the ECDSA signature pair
     * @param spender The address to be approved
     * @param v The recovery byte of the signature
     */
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      rawAmount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens held by the `account`
     * @param account The address of the account to get the balance of
     * @returns The number of tokens held
     */
    balanceOf(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Get the number of tokens held by the `account`
     * @param account The address of the account to get the balance of
     * @returns The number of tokens held
     */
    "balanceOf(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @returns Whether or not the transfer succeeded
     */
    transfer(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from `msg.sender` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @returns Whether or not the transfer succeeded
     */
    "transfer(address,uint256)"(
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from `src` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @param src The address of the source account
     * @returns Whether or not the transfer succeeded
     */
    transferFrom(
      src: string,
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Transfer `amount` tokens from `src` to `dst`
     * @param dst The address of the destination account
     * @param rawAmount The number of tokens to transfer
     * @param src The address of the source account
     * @returns Whether or not the transfer succeeded
     */
    "transferFrom(address,address,uint256)"(
      src: string,
      dst: string,
      rawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Delegate votes from `msg.sender` to `delegatee`
     * @param delegatee The address to delegate votes to
     */
    delegate(
      delegatee: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Delegate votes from `msg.sender` to `delegatee`
     * @param delegatee The address to delegate votes to
     */
    "delegate(address)"(
      delegatee: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Delegates votes from signatory to `delegatee`
     * @param delegatee The address to delegate votes to
     * @param expiry The time at which to expire the signature
     * @param nonce The contract state required to match the signature
     * @param r Half of the ECDSA signature pair
     * @param s Half of the ECDSA signature pair
     * @param v The recovery byte of the signature
     */
    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Delegates votes from signatory to `delegatee`
     * @param delegatee The address to delegate votes to
     * @param expiry The time at which to expire the signature
     * @param nonce The contract state required to match the signature
     * @param r Half of the ECDSA signature pair
     * @param s Half of the ECDSA signature pair
     * @param v The recovery byte of the signature
     */
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: Arrayish,
      s: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the current votes balance for `account`
     * @param account The address to get votes balance
     * @returns The number of current votes for `account`
     */
    getCurrentVotes(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the current votes balance for `account`
     * @param account The address to get votes balance
     * @returns The number of current votes for `account`
     */
    "getCurrentVotes(address)"(
      account: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Block number must be a finalized block or else this function will revert to prevent misinformation.
     * Determine the prior number of votes for an account as of a block number
     * @param account The address of the account to check
     * @param blockNumber The block number to get the vote balance at
     * @returns The number of votes the account had as of the given block
     */
    getPriorVotes(
      account: string,
      blockNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    /**
     * Block number must be a finalized block or else this function will revert to prevent misinformation.
     * Determine the prior number of votes for an account as of a block number
     * @param account The address of the account to check
     * @param blockNumber The block number to get the vote balance at
     * @returns The number of votes the account had as of the given block
     */
    "getPriorVotes(address,uint256)"(
      account: string,
      blockNumber: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
